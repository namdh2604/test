// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using Voltage.Witches.Screens;
using Voltage.Witches.Components;
using Voltage.Witches.Models;
using UnityEngine;

namespace Voltage.Witches.Controllers
{
	using Voltage.Witches.Configuration;

	using Voltage.Common.DebugTool.Timer;

	public class LoadingScreenController : ScreenController
	{
		private IScreenFactory _factory;
		private float _rawDifficulty;
		private IRecipe _recipe;
		private List<Ingredient> _selectedIngredients;

		private iGUISmartPrefab_LoadingScreen _screen;

		private DifficultyMap _difficultyMap;
		private MasterConfiguration _masterConfig;

		private IControllerRepo _repo;

		private static List<string> difficultyMapKeys = new List<string>()
		{
			"minigame_difficulty_easy",
			"minigame_difficulty_normal",
			"minigame_difficulty_tricky",
			"minigame_difficulty_hard",
			"minigame_difficulty_trouble"
		};

		public LoadingScreenController(ScreenNavigationManager navigationManager, IScreenFactory factory, Player player, float rawDifficulty, IRecipe recipe,List<Ingredient> selectedIngredients, IControllerRepo repo, MasterConfiguration masterConfig)
		: base(navigationManager)
		{
			AmbientDebugTimer.Current.Start("LoadingScreenController >>> CTOR assignment");

			_factory = factory;
			_rawDifficulty = rawDifficulty;
			_recipe = recipe;
			_selectedIngredients = selectedIngredients;

			_repo = repo;
			_masterConfig = masterConfig;

			_difficultyMap = MapDifficulty(_masterConfig);

			AmbientDebugTimer.Current.Start("LoadingScreenController >>> Initialize View");
			InitializeView();

			AmbientDebugTimer.Current.Stop ();
		}

		private DifficultyMap MapDifficulty(MasterConfiguration masterConfig)
		{
			var difficulty = masterConfig.Game_Properties_Config.Mini_Game_Difficulty;
			
			var easy = difficulty[difficultyMapKeys[0]]["high"];
			var normal = difficulty[difficultyMapKeys[1]]["high"];
			var tricky = difficulty[difficultyMapKeys[2]]["high"];
			var hard = difficulty[difficultyMapKeys[3]]["high"];
			var trouble = difficulty[difficultyMapKeys[4]]["high"];
			
//			object[] obs = new object[] { trouble, hard, tricky, normal, easy };
//			var message = string.Format("TROUBLE {0}, HARD {1}, TRICKY {2}, NORMAL {3}, EASY {4}",obs);
//			Debug.LogWarning(message);
			
			return new DifficultyMap(new float[] { trouble, hard, tricky, normal, easy });
		}

        public override void Dispose()
        {
            // TODO: Not calling the base because the base is calling GetScreen, which will force us to generate another screen then delete and then set to null.
            // We need to find out if we can safely turn all GetScreen to return the screen and not make one if one doesn't exist.
            if (_screen != null)
            {
                _screen.Dispose();
                _screen = null;
            }
        }
        
		protected override IScreen GetScreen()
		{
			if(_screen != null)
			{
				return _screen;
			}
			else
			{
				_screen = _factory.GetScreen<iGUISmartPrefab_LoadingScreen>();
				_screen.Init(this);
				return _screen;
			}
		}

		public override void MakePassive (bool value)
		{
			_screen.SetEnabled(!value);
		}

		private void InitializeView()
		{
			_screen = _factory.GetScreen<iGUISmartPrefab_LoadingScreen>();
			_screen.Init(this);
		}

		public void MoveToNextScreen()
		{
			QueuedObjects wager = new QueuedObjects(_recipe, _selectedIngredients);
			var difficulty = (Voltage.Witches.Lib.MiniGameDifficulty)_difficultyMap.GetDifficulty(_rawDifficulty);
			TracingScreenController nextScreen = _repo.Get<TracingScreenController>();
			nextScreen.SetDifficulty((int)difficulty);
			nextScreen.SetQueuedObject(wager);

			// NOTE: The tracing screen doesn't get added to the navigation manager here because it adds itself.
			// It does this because we want to show the loading screen up until the mini-game is ready to be displayed
		}

		public void SetEnabled(bool value)
		{
			_screen.SetEnabled(value);
		}

		public void Unload()
		{
			_screen.SetEnabled(false);
		}
	}
}

